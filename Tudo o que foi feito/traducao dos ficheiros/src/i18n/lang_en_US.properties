#  /*
#  * Copyright (c) 2015 Instituto Politecnico de Tomar. All rights reserved.
#  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#  *
#  * This code is free software; you can redistribute it and/or modify it
#  * under the terms of the GNU General Public License version 2 only, as
#  * published by the Free Software Foundation.
#  *
#  * This code is distributed in the hope that it will be useful, but WITHOUT
#  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
#  * version 2 for more details (a copy is included in the LICENSE file that
#  * accompanied this code).
#  *
#  * You should have received a copy of the GNU General Public License version
#  * 2 along with this work; if not, write to the Free Software Foundation,
#  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#  *
#  */
#//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
#//::                                                                         ::
#//::     Antonio Manuel Rodrigues Manso                                      ::
#//::                                                                         ::
#//::     I N S T I T U T O    P O L I T E C N I C O   D E   T O M A R        ::
#//::     Escola Superior de Tecnologia de Tomar                              ::
#//::     e-mail: manso@ipt.pt                                                ::
#//::     url   : http://orion.ipt.pt/~manso                                  ::
#//::                                                                         ::
#//::     This software was build with the purpose of investigate and         ::
#//::     learning.                                                           ::
#//::                                                                         ::
#//::                                                               (c)2015   ::
#//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#//////////////////////////////////////////////////////////////////////////////
#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# UPDATE lang_keys.java if set new values
# UPDATE KeyWord.java if set new values
#--------------------------------------------------------------------------------
KEYWORD.begin= begin
KEYWORD.end= end
#-----------------------------------
KEYWORD.define = define
KEYWORD.execute = execute
KEYWORD.write = write
KEYWORD.read = read
#-----------------------------------
KEYWORD.if = if
KEYWORD.then = then
KEYWORD.else = else
KEYWORD.while = while
KEYWORD.do = do
#-----------------------------------
KEYWORD.for = iterate
KEYWORD.from = from
KEYWORD.to = to
KEYWORD.step = step
KEYWORD.next = next
#-------------------------------
KEYWORD.function = function
KEYWORD.return = return
KEYWORD.break = break
KEYWORD.continue = continue

#-------------------------------
KEYWORD.comments = //
KEYWORD.memory = memory
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.globalMemoryName = GlobalMemory
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.mainFunctionName = MainProgram
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.defaultFunctionName = Function
#------------------------------------------------------------------------------
#-------         D E F I N E    S Y M B O L S                     -------------
#-------           M E N  U      D E F I N E                      -------------
#------------------------------------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

TYPE.void = void
TYPE.integer = integer
TYPE.real = real

TYPE.character = character
TYPE.character.limitator = '
TYPE.character.escape = \\
TYPE.string = string
TYPE.string.limitator = "
TYPE.boolean = boolean
TYPE.boolean.true = true
TYPE.boolean.false = false
TYPE.defaultVarName = var
TYPE.array.name = array
#--------------------------------------------------------------------------------
CONSTANT.true = true
CONSTANT.true.name = _T
CONSTANT.true.help = boolean value of true
CONSTANT.false = false
CONSTANT.false.name = _F
CONSTANT.false.help = boolean value of false
CONSTANT.PI = 3.141592653589793
CONSTANT.PI.name = _PI
CONSTANT.PI.help = PI value
CONSTANT.E = 2.718281828459045
CONSTANT.E.name = _E
CONSTANT.E.help = Euler number
#------------------ 
SEPARATOR.comma = ,
#---------------- parentesis 
BRACKET.round.open = (
BRACKET.round.close = )
#---------------- index de arrays
BRACKET.square.open = [
BRACKET.square.close = ]
#---------------- conjunto de valores
BRACKET.brace.open = {
BRACKET.brace.close = }
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
OPERATOR.set = =
OPERATOR.set.help = set
#-------------------------------------------------------------------------------
OPERATOR.negative = -
OPERATOR.negative.help negative signal
#-------------------------------------------------------------------------------
OPERATOR.sum = +
OPERATOR.sum.help = sum
OPERATOR.sub = -
OPERATOR.sub.help = subtraction
OPERATOR.mult = *
OPERATOR.mult.help = multiplication
OPERATOR.div = /
OPERATOR.div.help = division
 
OPERATOR.mod = %
OPERATOR.mod.help = remainder of integer division
OPERATOR.power = ^
OPERATOR.power.help = power
#-------------------------------------------------------------------------------
OPERATOR.equal = ==
OPERATOR.equal.help = equal to
OPERATOR.different = !=
OPERATOR.different.help = not equal to
OPERATOR.greater = >
OPERATOR.greater.help = greater than
OPERATOR.greaterOrEqual = >=
OPERATOR.greaterOrEqual.help = greater than or equal to
OPERATOR.less = <
OPERATOR.less.help = menor que
OPERATOR.lessOrEqual = <=
OPERATOR.lessOrEqual.help = less than or equal to
#-------------------------------------------------------------------------------
OPERATOR.not = !
OPERATOR.not.help = logical (not)
OPERATOR.and = &&
OPERATOR.and.help = logical (and)
OPERATOR.or = ||
OPERATOR.or.help = logical (or)
#-------------------------------------------------------------------------------
# NOTE : to add new functions update:
# 1 - CoreCalculator -  functions.add(new FUNC());
# 2 - ExpressionPopup -  popul.add(buildItem(new FUNC()))
#-------------------------------------------------------------------------------
FUNCTION.sin = sin
FUNCTION.sin.help = returns sine of an angle in radians
FUNCTION.sin.definition = sin( radians )
FUNCTION.cos = cos
FUNCTION.cos.help = returns cosine of an angle in radians
FUNCTION.cos.definition = cos( radians )
FUNCTION.tan = tan
FUNCTION.tan.help = returns tangent of an angle in radians
FUNCTION.tan.definition = tan( radians )
FUNCTION.asin = asin
FUNCTION.asin.help = returns the arc sine of a value [-1,1]
FUNCTION.asin.definition = asin( number )
FUNCTION.acos = acos
FUNCTION.acos.help = returns the arc cosine of a value [-1,1]
FUNCTION.acos.definition = acos( number )
FUNCTION.atan = atan
FUNCTION.atan.help = returns the arc tangent of a value [-PI/2, PI/2]
FUNCTION.atan.definition = atan( radians )
FUNCTION.sinh = sinh
FUNCTION.sinh.help = returns the hyperbolic sine
FUNCTION.sinh.definition = sinh( radians )
FUNCTION.cosh = cosh
FUNCTION.cosh.help = returns the hyperbolic sine
FUNCTION.cosh.definition = cosh( radians )
FUNCTION.tanh = tanh
FUNCTION.tanh.help = Returns the hyperbolic tangent
FUNCTION.tanh.definition = tanh( radians )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
FUNCTION.random = random
FUNCTION.random.help = random number int the interval [0.0  1.0]
FUNCTION.random.definition = random()
FUNCTION.abs = abs
FUNCTION.abs.help = returns the absolute value of a value
FUNCTION.abs.definition = abs( number )
FUNCTION.sqrt = sqrt
FUNCTION.sqrt.help = Returns the square root of a value
FUNCTION.sqrt.definition = sqrt( number )
FUNCTION.exp = exp
FUNCTION.exp.help = returns exponential ( e^x )
FUNCTION.exp.definition = exp( number )
FUNCTION.int = int
FUNCTION.int.help = conversion to integer
FUNCTION.int.definition = int( number )
FUNCTION.round = round
FUNCTION.round.help=Returns the closest integer to the argument, with ties rounding up
FUNCTION.round.definition = round( real, int )
FUNCTION.pow = pow
FUNCTION.pow.help = Returns the value of the first argument raised to the power of the second argument
FUNCTION.pow.definition = pow( base , expoent )
FUNCTION.min = min
FUNCTION.min.help = Returns the smaller of two arguments.
FUNCTION.min.definition = min( num_txt , num_txt )
FUNCTION.max = max
FUNCTION.max.help = Returns the greather of two arguments.
FUNCTION.max.definition = max( num_txt , num_txt )
FUNCTION.log = log
FUNCTION.log.help = Returns the base 10 logarithm of a double value.
FUNCTION.log.definition = log( number )
FUNCTION.ln = ln
FUNCTION.ln.help = Returns the natural logarithm (base e) of a double value.
FUNCTION.ln.definition = ln( number )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
FUNCTION.align = align
FUNCTION.align.help = returns a string with the 1. argument aligned to left (-) or right (+)
FUNCTION.align.definition = align( variable , number )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
FUNCTION.elementsof=elementsOf
FUNCTION.elementsof.help=returns the number of elements of the variable simple= 1 Text = number of chars Array= number of elements
FUNCTION.elementsof.definition=elementsOf( var )
