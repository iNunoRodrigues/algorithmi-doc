#  /*
#  * Copyright (c) 2015 Instituto Politecnico de Tomar. All rights reserved.
#  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#  *
#  * This code is free software; you can redistribute it and/or modify it
#  * under the terms of the GNU General Public License version 2 only, as
#  * published by the Free Software Foundation.
#  *
#  * This code is distributed in the hope that it will be useful, but WITHOUT
#  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
#  * version 2 for more details (a copy is included in the LICENSE file that
#  * accompanied this code).
#  *
#  * You should have received a copy of the GNU General Public License version
#  * 2 along with this work; if not, write to the Free Software Foundation,
#  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#  *
#  */
#//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
#//::                                                                         ::
#//::     Antonio Manuel Rodrigues Manso                                      ::
#//::                                                                         ::
#//::     I N S T I T U T O    P O L I T E C N I C O   D E   T O M A R        ::
#//::     Escola Superior de Tecnologia de Tomar                              ::
#//::     e-mail: manso@ipt.pt                                                ::
#//::     url   : http://orion.ipt.pt/~manso                                  ::
#//::                                                                         ::
#//::     This software was build with the purpose of investigate and         ::
#//::     learning.                                                           ::
#//::                                                                         ::
#//::                                                               (c)2015   ::
#//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#//////////////////////////////////////////////////////////////////////////////
#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# UPDATE lang_keys.java if set new values
# UPDATE KeyWord.java if set new values
#--------------------------------------------------------------------------------
KEYWORD.begin= public class & { \n public static void main(String[] args) {
KEYWORD.end= }
#-----------------------------------
KEYWORD.define = =
KEYWORD.execute = executar 
KEYWORD.write = System.out.println(&);
KEYWORD.read = Scanner scanIn = new Scanner(System.in); \n &=scanIn.nextLine();
#-----------------------------------
KEYWORD.if = if(&)
KEYWORD.then = {&;}
KEYWORD.else = else{&;}
KEYWORD.while = while(&)
KEYWORD.do = {&;}
#-----------------------------------
KEYWORD.for = for(&=0; i < publicKeyBytes.length; ++i) {
KEYWORD.from = =&;
KEYWORD.to = &<&;
KEYWORD.step = ++&){
KEYWORD.next = &;}
#-------------------------------
KEYWORD.function = funcao
KEYWORD.return = retornar
KEYWORD.break = quebrar
KEYWORD.continue = continuar

#-------------------------------
KEYWORD.comments = //
KEYWORD.memory = memoria
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.globalMemoryName = MemoriaGlobal
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.mainFunctionName = ProgramaPrincipal
#---nome da funcao main - mesmas regras das variaveis
KEYWORD.defaultFunctionName = Funcao
#------------------------------------------------------------------------------
#-------         D E F I N E    S Y M B O L S                     -------------
#-------           M E N  U      D E F I N E                      -------------
#------------------------------------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

TYPE.void = void
TYPE.integer = int
TYPE.real = float

TYPE.character = char
TYPE.character.limitator = '
TYPE.character.escape = \\

TYPE.string = String
TYPE.string.limitator = "

TYPE.boolean = bool
TYPE.boolean.true = true
TYPE.boolean.false = false

TYPE.defaultVarName = var

TYPE.array.name = matriz


#--------------------------------------------------------------------------------
CONSTANT.true = true
CONSTANT.true.name = _V
CONSTANT.true.help = valor l\u00f3gico de verdade

CONSTANT.false = false
CONSTANT.false.name = _F
CONSTANT.false.help = valor l\u00f3gico de falso

CONSTANT.PI = 3.141592653589793
CONSTANT.PI.name = _PI
CONSTANT.PI.help = valor de PI

CONSTANT.E = 2.718281828459045
CONSTANT.E.name = _E
CONSTANT.E.help = N\u00famero de Euler

#------------------ 
SEPARATOR.comma = ,
#---------------- parentesis 
BRACKET.round.open = (
BRACKET.round.close = )
#---------------- index de arrays
BRACKET.square.open = [
BRACKET.square.close = ]
#---------------- conjunto de valores
BRACKET.brace.open = {
BRACKET.brace.close = }
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
OPERATOR.set = =
OPERATOR.set.help = atribui\u00e7\u00e3o
#-------------------------------------------------------------------------------
OPERATOR.negative = -
OPERATOR.negative.help sinal negativo

#-------------------------------------------------------------------------------
OPERATOR.sum = +
OPERATOR.sum.help = soma

OPERATOR.sub = -
OPERATOR.sub.help = subtra\u00e7\u00e3o

OPERATOR.mult = *
OPERATOR.mult.help = multiplica\u00e7\u00e3o

OPERATOR.div = /
OPERATOR.div.help = divis\u00e3o
 
OPERATOR.mod = %
OPERATOR.mod.help = resto da divis\u00e3o inteira

OPERATOR.power = ^
OPERATOR.power.help = pot\u00eancia

#-------------------------------------------------------------------------------

OPERATOR.equal = ==
OPERATOR.equal.help = igualdade a 

OPERATOR.different = !=
OPERATOR.different.help = diferente de

OPERATOR.greater = >
OPERATOR.greater.help = maior que


OPERATOR.greaterOrEqual = >=
OPERATOR.greaterOrEqual.help = maior ou igual que

OPERATOR.less = <
OPERATOR.less.help = menor que


OPERATOR.lessOrEqual = <=
OPERATOR.lessOrEqual.help = menor ou igual que

#-------------------------------------------------------------------------------

OPERATOR.not = !
OPERATOR.not.help = nega\u00e7\u00e3o (n\u00e3o)


OPERATOR.and = &&
OPERATOR.and.help = conjun\u00e7\u00e3o (e)

OPERATOR.or = ||
OPERATOR.or.help = disjun\u00e7\u00e3o (ou)

#-------------------------------------------------------------------------------
# NOTE : to add new functions update:
# 1 - CoreCalculator -  functions.add(new FUNC());
# 2 - ExpressionPopup -  popul.add(buildItem(new FUNC()))
#-------------------------------------------------------------------------------
FUNCTION.sin = sin
FUNCTION.sin.help = calcula o seno de um angulo em radianos
FUNCTION.sin.definition = Math.sin( numero )


FUNCTION.cos = cos
FUNCTION.cos.help = calcula o coseno de um angulo em radianos
FUNCTION.cos.definition = Math.cos( numero )

FUNCTION.tan = tan
FUNCTION.tan.help = calcula a tangente de um angulo em radianos
FUNCTION.tan.definition = Math.tan( numero )

FUNCTION.asin = asin
FUNCTION.asin.help = calcula o arco seno de um valor [-1,1]
FUNCTION.asin.definition = Math.asin( numero )

FUNCTION.acos = acos
FUNCTION.acos.help = calcula o arco coseno de um valor [-1,1]
FUNCTION.acos.definition = Math.acos( numero )

FUNCTION.atan = atan
FUNCTION.atan.help = calcula o arco tangente de um valor [-PI/2, PI/2]
FUNCTION.atan.definition = Math.atan( numero )

FUNCTION.sinh = sinh
FUNCTION.sinh.help = calcula o seno hiperb\u00f3lico 
FUNCTION.sinh.definition = Math.sinh( numero )

FUNCTION.cosh = cosh
FUNCTION.cosh.help = calcula o coseno hiperb\u00f3lico 
FUNCTION.cosh.definition = Math.cosh( numero )

FUNCTION.tanh = tanh
FUNCTION.tanh.help = calcula a tangente hiperb\u00f3lica
FUNCTION.tanh.definition = Math.tanh( numero )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
FUNCTION.random = random
FUNCTION.random.help = calcula um valor aleatorio no intervalo [0.0  1.0]
FUNCTION.random.definition = Math.random()

FUNCTION.abs = abs
FUNCTION.abs.help = calcula o valor positivo do argumento
FUNCTION.abs.definition = Math.abs( numero )


FUNCTION.sqrt = sqrt
FUNCTION.sqrt.help = calcula a raiz quadrada de um numero
FUNCTION.sqrt.definition = Math.sqrt( numero )

FUNCTION.exp = exp
FUNCTION.exp.help = calcula a exponencial de um numero ( e^x )
FUNCTION.exp.definition = Math.exp( numero )


FUNCTION.int = int
FUNCTION.int.help = converte um numero para inteiro (retira a parte decimal)
FUNCTION.int.definition = Integer.parseInt( "numero" )


FUNCTION.round = round
FUNCTION.round.help = arredonda um numero com casas decimais
FUNCTION.round.definition = Math.round( real, inteiro )


FUNCTION.pow = pow
FUNCTION.pow.help = calcula a pentencia entre dois numeros
FUNCTION.pow.definition = Math.pow( base , expoente )

FUNCTION.min = min
FUNCTION.min.help = calcula o m\u00ednimo entre dois numeros
FUNCTION.min.definition = Math.min( num_txt , num_txt )

FUNCTION.max = max
FUNCTION.max.help = calcula o m\u00e1ximo entre dois numeros
FUNCTION.max.definition = Math.max( num_txt , num_txt )


FUNCTION.log = log
FUNCTION.log.help = Logaritmo de base 10
FUNCTION.log.definition = Math.log( numero )


FUNCTION.ln = ln
FUNCTION.ln.help = Logaritmo natural ( base e )
FUNCTION.ln.definition = Math.ln( numero )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
FUNCTION.align = align
FUNCTION.align.help = alinha um simbolo \u00e1 esquerda ou \u00e1 direita\n\
[simbolo] - variavel ou express\u00e3o para alinhar\n\
[numero] - numero de espa\u00e7os disponiveis para impress\u00e3o\n\
se for negativo alinha \u00e1 esquerda, se for positivo \u00e1 direita\n\
exemplos:\n\
align("ola", -6) => "ola___" - Alinhar com 6 espa\u00e7os \u00e1 esquerda\n\
align("ola", 6) => "___ola" - Alinhar com 6 espa\u00e7os \u00e1 direita\n
FUNCTION.align.definition = align( simbolo , numero )
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

